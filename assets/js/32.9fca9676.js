(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{474:function(e,t,a){e.exports=a.p+"assets/img/Thermal_schema_files.0c7dea0a.png"},475:function(e,t,a){e.exports=a.p+"assets/img/Thermal_pipeline_ERD.fe0616c1.png"},476:function(e,t,a){e.exports=a.p+"assets/img/Optogenetics_pipeline.79e7de67.png"},477:function(e,t,a){e.exports=a.p+"assets/img/manipulation_trainingGUI.37ef27b0.png"},529:function(e,t,a){"use strict";a.r(t);var i=a(10),n=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("ul",[t("li",[e._v("This documentation will guide the researcher through the process of creating a new manipulation pipeline.")]),e._v(" "),t("li",[e._v("At BRAINCoGS optogenetics and thermal manipulation are currently supported.")])]),e._v(" "),t("h2",{attrs:{id:"what-does-the-manipulation-pipeline-include"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-does-the-manipulation-pipeline-include"}},[e._v("#")]),e._v(" What does the “manipulation” pipeline include:")]),e._v(" "),t("ul",[t("li",[e._v("Minimum data framework to store in a DB all relevant data from a specific manipulation.")]),e._v(" "),t("li",[e._v("Behavior integration. Training system will include the manipulation as an option to be selected for a behavior session.")]),e._v(" "),t("li",[e._v("Generic software parameters to be used in behavior code.")])]),e._v(" "),t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("ul",[t("li",[e._v("In order to create a new manipulation it’s assumed that:")]),e._v(" "),t("li",[e._v("The researcher is able to connect to "),t("a",{attrs:{href:"https://braincogs.github.io/software/db_access.html#db-access-for-matlab-repository"}},[e._v("datajoint00.pni.princeton.edu DB")])]),e._v(" "),t("li",[e._v("Latest version of u19_pipeline_matlab repository.")])]),e._v(" "),t("h2",{attrs:{id:"initial-set-up"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initial-set-up"}},[e._v("#")]),e._v(" Initial set-up")]),e._v(" "),t("ul",[t("li",[e._v("Connect to database "),t("code",[e._v("connect_datajoint00")])]),e._v(" "),t("li",[e._v("Create new manipulation schema (substitute manipulation_name with the real name of the manipulation: "),t("code",[e._v("create_new_manipulation_schema('(manipulation_name)', 1)")])]),e._v(" "),t("li",[e._v("This will create a new schema “base” code on the "),t("code",[e._v("U19-pipeline-matlab/schemas")]),e._v(" directory:")]),e._v(" "),t("li",[e._v("(We will use “thermal” manipulation for this example).")])]),e._v(" "),t("figure",[t("img",{attrs:{src:a(474)}})]),e._v(" "),t("figure",[t("img",{attrs:{src:a(475)}}),e._v(" "),t("center",[t("figcaption",[e._v("Thermal manipulation file creation & Entity-Relationship diagram on the BRAINCoGS DB")])])],1),e._v(" "),t("h2",{attrs:{id:"table-description"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-description"}},[e._v("#")]),e._v(" Table description")]),e._v(" "),t("ul",[t("li",[e._v("Throughout the table description chapter we are going to give an example of an already working manipulation pipeline. (Optogenetics)")])]),e._v(" "),t("h3",{attrs:{id:"manipulation-protocol-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manipulation-protocol-table"}},[e._v("#")]),e._v(' "Manipulation" Protocol table')]),e._v(" "),t("ul",[t("li",[t("p",[e._v("The protocol table stores related information that defines the current manipulation “type” to be used on a behavior session.")])]),e._v(" "),t("li",[t("p",[e._v("Here is the minimum table definition for a manipulation protocol table, it is composed by an id to identify the protocol and a description field.")])]),e._v(" "),t("li",[t("p",[e._v("Generic "),t("strong",[e._v('"Manipulation" Protocol.m')])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("%{\n# Defined <manipulation> protocols for training\n<manipulation>_protocol_id     : int AUTO_INCREMENT\n---\nprotocol_description        : varchar(256)                  \n%}\n")])])]),t("h3",{attrs:{id:"adding-features-to-manipulation-protocol-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adding-features-to-manipulation-protocol-table"}},[e._v("#")]),e._v(' Adding features to "Manipulation" Protocol table')]),e._v(" "),t("ul",[t("li",[t("p",[e._v("For each manipulation protocol it is possible to add from 0 to n “features” that will define & describe the protocol. We are going to describe all features added for "),t("strong",[e._v("OptogeneticsProtocol")]),e._v(" as an example:")])]),e._v(" "),t("li",[t("p",[e._v("It is important to know from an optogenetic experiment what kind of stimulation was given to the subject: Frequency, wavelength, power etc. All these variables can be stored into a “feature” table and be categorized as StimulationParameters.")])]),e._v(" "),t("li",[t("p",[e._v("What if stimulation was not a square pulse ? We can create a “feature” table to define (if needed) specific waveforms for a given session. (OptogeneticsWaveform)")])]),e._v(" "),t("li",[t("p",[e._v("What if different rooms have different laser systems models ? We can create a “feature” table to store all possible devices to be used in an optogenetic experiment (OptogeneticsDevice).")])]),e._v(" "),t("li",[t("p",[e._v("For each of these features we need to create a new table that encompasses the needed information for that feature. We will call all these extra tables a protocol “feature” table.")])]),e._v(" "),t("li",[t("p",[e._v("For a guide on how to define DJ tables go to: "),t("a",{attrs:{href:"https://docs.datajoint.org/matlab/definition/02-Creating-Tables.html"}},[e._v("this link")]),e._v(".")])])]),e._v(" "),t("figure",[t("img",{attrs:{src:a(476)}}),e._v(" "),t("center",[t("figcaption",[e._v("Tables that define an optogenetic protocol for a session.")])])],1),e._v(" "),t("ul",[t("li",[e._v("For the current guide we will only show OptogeneticsStimulationParameters definition as an example:")])]),e._v(" "),t("h3",{attrs:{id:"optogeneticsstimulationparameters-m"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optogeneticsstimulationparameters-m"}},[e._v("#")]),e._v(" OptogeneticsStimulationParameters.m:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" %{\n # Parameters related to laser stimulation\n stim_parameter_set_id       : int AUTO_INCREMENT  # \n ---\n stim_parameter_description  : varchar(256)        #\n stim_wavelength             : decimal(5,1)        # (nm)\n stim_power                  : decimal(4,1)        # (mW)\n stim_frequency              : decimal(6,2)        # (Hz)\n stim_pulse_width            : decimal(5,1)        # (ms)\n %}\n \n classdef OptogeneticStimulationParameter < dj.Lookup\n   properties\n   end\n end\n")])])]),t("ul",[t("li",[t("p",[e._v("Fields needed for a protocol “feature” table:")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("id field:")]),e._v(" as an int AUTO_INCREMENT type as the only primary key  (e.g. stim_parameter_set_id).")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("extra_fields:")]),e._v(" Any other field that helps to define the feature.")])]),e._v(" "),t("li",[t("p",[e._v('After all feature tables are defined they should be added to the "Manipulation" Protocol table.')])]),e._v(" "),t("li",[t("p",[e._v("For our Optogenetics example:")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('% Declare new "feature" table\noptogenetics.OptogeneticsStimulationParameters\n% Add the feature -> protocol table\nadd_feature_key_protocol_table(optogenetics.OptogeneticsProtocol, ... optogenetics.OptogeneticsStimulationParameters)\n% Sync definition from DB to .m file\nsyncDef(optogenetics.OptogeneticsProtocol);\n% clear previous connection and connect again\nclear all\nconnect_datajoint00\n')])])]),t("ul",[t("li",[e._v('After the “features” tables are added to the "Manipulation" Protocol table we are ready to add protocols to be “ready” and selectable for a behavior session:')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" % Insert stim parameter record\n stim_parameter_rec.stim_parameter_description = 'cool stims'\n stim_parameter_rec.stim_wavelength = 473\n stim_parameter_rec.stim_power = 10                \n stim_parameter_rec.stim_frequency = 100        \n stim_parameter_rec.stim_pulse_width = 1\n insert(optogenetics.OptogeneticsStimulationParameters, stim_parameter_rec)  \n\n % get last inserted stim_id\n stim_id = fetch(optogenetics.OptogeneticsStimulationParameters, 'ORDER BY stim_parameter_set_id desc LIMIT 1');\n\n % or look for a previously inserted parameter\n all_stim_params = fetch(optogenetics.OptogeneticsStimulationParameters, '*')\n stim_id = 1;\n\n % Insert new protocol with new stimulation parameter\n new_protocol.protocol_description = 'this_is_new_protocol'\n new_protocol.stim_parameter_set_id = stim_id;\n insert(optogenetics.OptogeneticsProtocol, new_protocol)\n")])])]),t("h3",{attrs:{id:"manipulation-softwareparameters-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manipulation-softwareparameters-table"}},[e._v("#")]),e._v(' "Manipulation" SoftwareParameters table')]),e._v(" "),t("ul",[t("li",[e._v("The software parameters table stores a set of parameters (a matlab struct, a python dictionary) that the code that handles the behavior will use during the session.")]),e._v(" "),t("li",[e._v("We will show how to insert new software parameters:")]),e._v(" "),t("li",[e._v("This for the "),t("strong",[e._v("optogenetics.OptogeneticSoftwareParameter")]),e._v(" table")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("param_struct = struct();\nparam_struct.software_parameter_description =  'stimulation_sequence # 1';\n \n% All parameters goes in here \n%(P_on and lsrepoch are the common and needed for current opto experiments)\nparam_struct.software_parameters.P_on      = 0.21;\nparam_struct.software_parameters.lsrepoch  = 'cue';\n  \n%Insert parameter\nsoftware_param_id = try_insert(optogenetics.OptogeneticSoftwareParameter, param_struct)\n")])])]),t("ul",[t("li",[e._v("Check "),t("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline-matlab/blob/master/scripts/insert_software_parameters/insert_optogenetic_software_parameter.m"}},[e._v("insert_optogenetic_software_parameter")]),e._v(" script to use as example.")]),e._v(" "),t("li",[e._v("How to read software parameters on experiment code (ViRMEn)")]),e._v(" "),t("li",[e._v("Example to get software parameters on the initializatonCodeFun on virmen:")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function vr = initializationCodeFun(vr)\n\nvr.software_params     = vr.exper.userdata.trainee.softwareParams.software_parameters;\nvr.lsrepoch = vr.software_params.lsrepoch;\nvr.P_on = vr.software_params.P_on;\n")])])]),t("h3",{attrs:{id:"manipulation-session-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manipulation-session-table"}},[e._v("#")]),e._v(' "Manipulation" Session table')]),e._v(" "),t("ul",[t("li",[e._v("This table stores manipulation data for a specific behavior session. This table “links” a manipulationProtocol & manipulationSoftwareParameters with a behavior Session.")]),e._v(" "),t("li",[e._v("This table does not need any additional code on it. (Unless extra fields from the behavior file are needed to be stored). "),t("strong",[e._v("Researcher should contact DB designer if that is their intention")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("OptogeneticSession.m \n%{\n# Information of a optogenetic session\n-> acquisition.Session\n---\n-> acquisition.SessionManipulation\n-> optogenetics.OptogeneticProtocol\n-> optogenetics.OptogeneticSoftwareParameter\n%}\n")])])]),t("h3",{attrs:{id:"manipulation-sessiontrial-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manipulation-sessiontrial-table"}},[e._v("#")]),e._v(' "Manipulation" SessionTrial table')]),e._v(" "),t("ul",[t("li",[e._v("This table stores data, on a trial by trial basis, corresponding to the manipulation performed during the behavior session.")]),e._v(" "),t("li",[e._v('There is a section on any  "Manipulation" SessionTrial class on the get_manipulation_trial_data function code where researcher has to add lines to fetch specific trial manipulation data:')])]),e._v(" "),t("p",[e._v("Code extract  from "),t("strong",[e._v("OptogeneticSessionTrial")]),e._v(" table")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function trial_structure = get_manipulation_trials_data(~,session_key, log)\n.\n.\nfor itrial = 1:nTrials\n\n  curr_trial = log.block(iBlock).trial(itrial);                            \n  trial_data = session_key;\n  trial_data.stim_on           = curr_trial.lsrON;\n  trial_data.t_stim_on  = time_trial(curr_trial.iLaserOn);\n  trial_data.stim_epoch = num2str(curr_trial.LaserTrialType);\n  trial_structure(total_trials) = trial_data;\n")])])]),t("h3",{attrs:{id:"training-with-new-manipulation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#training-with-new-manipulation"}},[e._v("#")]),e._v(" Training with new manipulation")]),e._v(" "),t("ul",[t("li",[e._v("After all code for new manipulation has been set up the researcher will be able to select a specific manipulation type, protocol & software parameters that will be associated with the schedule for a given animal. Subsequent behavior sessions will correspond to that selection.")])]),e._v(" "),t("figure",[t("img",{attrs:{src:a(477)}}),e._v(" "),t("center",[t("figcaption",[e._v("Parameter selection (manipulation, protocol & software Parameter) for a training schedule of a subject.")])])],1),e._v(" "),t("h3",{attrs:{id:"fetching-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fetching-data"}},[e._v("#")]),e._v(" Fetching Data")]),e._v(" "),t("ul",[t("li",[e._v("After training has occurred all relevant data will be accessible in the corresponding tables of the database.")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.datajoint.org/matlab/queries/03-Fetch.html"}},[e._v("Datajoint fetch guide")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("key = struct('subject_fullname', 'sbolkan_a2a_492', 'session_date', '2022-06-27')\nfetch(optogenetics.OptogeneticSessionTrial * optogenetics.OptogeneticSession & key,'*')\n\nans = \n\n  363×1 struct array with fields:\n\n    subject_fullname\n    session_date\n    session_number\n    block\n    trial_idx\n    stim_on\n    t_stim_on\n    t_stim_off\n    stim_epoch\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);