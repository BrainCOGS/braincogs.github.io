(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{458:function(e,i,t){e.exports=t.p+"assets/img/workflow_manager_recordings.e88a0dcc.png"},459:function(e,i,t){e.exports=t.p+"assets/img/imaging_pipeline_basic_ERD.0e943a32.png"},460:function(e,i,t){e.exports=t.p+"assets/img/ephys_pipeline_basic_ERD.09d46df2.png"},461:function(e,i,t){e.exports=t.p+"assets/img/workflow_manager_jobs.9d7f827b.png"},462:function(e,i,t){e.exports=t.p+"assets/img/u19_automation_ERD.834911be.png"},523:function(e,i,t){"use strict";t.r(i);var n=t(10),r=Object(n.a)({},(function(){var e=this,i=e._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"frontmatter-title"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),i("p",[e._v("The Ephys/Imaging Automation Pipeline in BRAINCoGS main goals are:")]),e._v(" "),i("ul",[i("li",[e._v("Automate spike sorting and imaging segmentation for all recordings")]),e._v(" "),i("li",[e._v("Centralize/Standardize paths for Recording Data Storage")]),e._v(" "),i("li",[e._v("Unify & Register Ephys/Imaging Processing")]),e._v(" "),i("li",[e._v("Store processed data in BRAINCoGS Database (DJ)")])]),e._v(" "),i("p",[e._v("To accomplish this we developed three tools:")]),e._v(" "),i("ul",[i("li",[e._v("Ephys/Imaging Automation GUI ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/RecordingProcessJobGUI"}},[e._v("RecordingProcessJobGUI")]),e._v(")")]),e._v(" "),i("li",[e._v("Recording Workflow management ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/tree/master/u19_pipeline/automatic_job"}},[e._v("Automatic_job directory in U19-pipeline_python ")]),e._v(")")]),e._v(" "),i("li",[e._v("Collab reposiotries to handle Ephys/Imaging Processing ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/BrainCogsEphysSorters"}},[e._v("BrainCogsEphysSorters ")]),e._v(" and "),i("a",{attrs:{href:"https://github.com/BrainCOGS/BrainCogsImagingSegmentation"}},[e._v("BrainCogsImagingSegmentation ")]),e._v(")")])]),e._v(" "),i("h2",{attrs:{id:"ephys-imaging-automation-gui"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ephys-imaging-automation-gui"}},[e._v("#")]),e._v(" Ephys/Imaging Automation GUI")]),e._v(" "),i("h2",{attrs:{id:"workflow-management-description"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#workflow-management-description"}},[e._v("#")]),e._v(" Workflow management description")]),e._v(" "),i("p",[e._v("Workflow management code creates and coordinates of a set of tasks for all recordings that were registered with the GUI to make sure they are entirely processed.")]),e._v(" "),i("p",[e._v("Shell code executed as a cronjob for workflow management:\n("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/call_cronjob_automatic_job.sh"}},[e._v("call_cronjob_automatic_job.sh\n")]),e._v(")")]),e._v(" "),i("p",[e._v("Workflow management is composed mainly by two classes that handles recordings and recording_processes  (recording_processes or jobs are how recordings are composed)")]),e._v(" "),i("ul",[i("li",[e._v("Ephys recordings are composed by one or many independent probe electrophysiology recordings. Each probe recording correspond to a job in the workflow management")]),e._v(" "),i("li",[e._v("Calcium imaging recordings are composed by one or many independent field of views image stacks. Each field of view image stack correspond to a job in the workflow management.")])]),e._v(" "),i("p",[e._v("The class that manages workflow at the recording level is ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v(")")]),e._v(" "),i("figure",[i("img",{attrs:{src:t(458)}}),e._v(" "),i("center",[i("figcaption",[e._v("Workflow manager diagam at the recording level")])])],1),e._v(" "),i("h3",{attrs:{id:"main-functions-and-variables-in-recording-workflow-manager"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#main-functions-and-variables-in-recording-workflow-manager"}},[e._v("#")]),e._v(" Main functions and variables in recording workflow manager")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("recording_status_dict")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/params_config.py"}},[e._v("Params Config file")]),e._v("): This dictionary defines status definitions and corresponding functions to execute.")]),e._v(" "),i("li",[i("strong",[e._v("pipeline_handler_main")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v("): Main function in recording workflow\n"),i("ol",[i("li",[e._v("Executes corresponding functions based in status.")]),e._v(" "),i("li",[e._v("Executed every 30 minutes to check for new recordings to be handled.")]),e._v(" "),i("li",[e._v("Send notifications for processed and failed functions.")])]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("exception_handler")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v("): Python decorator for error handling.")])])]),e._v(" "),i("li",[i("strong",[e._v("modality_preingestion")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v("): Main ingestion function from recording to recording_process tables. There are subcalls depending on modality of recording (ephys or imaging).")])]),e._v(" "),i("h4",{attrs:{id:"imaging-preingestion-main-steps"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#imaging-preingestion-main-steps"}},[e._v("#")]),e._v(" Imaging preingestion main steps:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("imaging_preingestion")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v("): Ingestion to recording_process table for an imaging recording. Get all FOVs (TIFF stacks) for the recording and assign a new job for each one with corresponding parameters fetched from selection done in automation GUI.\n"),i("strong",[e._v("AcquiredTiff populate function")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/imaging_pipeline.py"}},[e._v("Imaging pipeline")]),e._v("): Auxiliar script to call "),i("strong",[e._v("populate_Imaging_AcquiredTiff")]),e._v(" script in MATLAB.")]),e._v(" "),i("li",[i("strong",[e._v("populate_Imaging_AcquiredTiff")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline-matlab/blob/master/scripts/populate_Imaging_AcquiredTiff.m"}},[e._v("populate_Imaging_AcquiredTiff")]),e._v("): Population calls to:\n"),i("ol",[i("li",[i("strong",[e._v("u19_imaging_pipeline.AcquiredTiff")]),e._v(": Each recording is divided into Tiff Splits (e.g. Mesoscope recordings contain multiple tiff stacks that will be processed independently). ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline-matlab/blob/master/schemas/%2Bimaging_pipeline/AcquiredTiff.m"}},[e._v("Code here")]),e._v(")")]),e._v(" "),i("li",[i("strong",[e._v("u19_imaging_pipeline.SyncImagingBehavior")]),e._v(": Find correspondence between virtual reality frame in the behavior experiment and Calcium Imaging frame in recording.\n("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline-matlab/blob/master/schemas/%2Bimaging_pipeline/SyncImagingBehavior.m"}},[e._v("Code here")]),e._v(")")])])])]),e._v(" "),i("figure",[i("img",{attrs:{src:t(459)}}),e._v(" "),i("center",[i("figcaption",[e._v("ERD for imaging pipeline at the recording level")])])],1),e._v(" "),i("h4",{attrs:{id:"ephys-preingestion-main-steps"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ephys-preingestion-main-steps"}},[e._v("#")]),e._v(" Ephys preingestion main steps:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("electrophysiology_preingestion")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_handler.py"}},[e._v("RecordingHandler")]),e._v("): Ingestion to recording_process table for an ephys recording. Get all probes for the recording and assign a new job for each one with corresponding parameters fetched from selection done in automation GUI.")])]),e._v(" "),i("ol",[i("li",[e._v("Ingest "),i("strong",[e._v("ephys_pipeline.EphysPipelineSession")]),e._v(" table")]),e._v(" "),i("li",[e._v("Ingest "),i("strong",[e._v("ephys_element.ProbeInsertion")]),e._v(" table")]),e._v(" "),i("li",[e._v("Ingest "),i("strong",[e._v("ephys_element.EphysRecording")]),e._v(" table")]),e._v(" "),i("li",[e._v("Ingest "),i("strong",[e._v("ephys_pipeline.BehaviorSync")]),e._v(" table: Find corresponding iteration in ephys recording with frame from Virmen behavior task ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/ephys_pipeline.py"}},[e._v("Code here ")]),e._v(") ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/utils/ephys_utils.py"}},[e._v(" and here ")]),e._v(").")]),e._v(" "),i("li",[e._v("For each probe (insertion_number) in EphysSession insert a Processing (job) in "),i("strong",[e._v("u19_recording_process.Processing")])])]),e._v(" "),i("figure",[i("img",{attrs:{src:t(460)}}),e._v(" "),i("center",[i("figcaption",[e._v("ERD for ephys pipeline at the recording level")])])],1),e._v(" "),i("h3",{attrs:{id:"main-functions-and-variables-in-recording-process-workflow-manager"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#main-functions-and-variables-in-recording-process-workflow-manager"}},[e._v("#")]),e._v(" Main functions and variables in recording_process workflow manager")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("recording_process_status_dict")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/params_config.py"}},[e._v("Params Config file")]),e._v("): This dictionary defines status definitions and corresponding functions to execute.")]),e._v(" "),i("li",[i("strong",[e._v("pipeline_handler_main")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording__process_handler.py"}},[e._v("RecProcessHandler")]),e._v("): Main function in recording process workflow")])]),e._v(" "),i("ol",[i("li",[e._v("Executes corresponding functions based in status.")]),e._v(" "),i("li",[e._v("Executed every 30 minutes to check for new recordings to be handled.")]),e._v(" "),i("li",[e._v("Send notifications for processed and failed functions.")])]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("transfer check/review")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_process_handler.py"}},[e._v("transfer_check/review")]),e._v("): Executes and monitors globus transfer from PNI to PrincetonUniversity clusters. (Deprecated)")]),e._v(" "),i("li",[i("strong",[e._v("slurm_job_queue/check")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_process_handler.py"}},[e._v("slurm_job_functions")]),e._v("): Generate slurm file and queue the job in the cluster that will process recording process. Monitor job to check if it has already finished.")]),e._v(" "),i("li",[i("strong",[e._v("populate_element")]),e._v(" in ("),i("a",{attrs:{href:"https://github.com/BrainCOGS/U19-pipeline_python/blob/master/u19_pipeline/automatic_job/u19_pipeline/automatic_job/recording_process_handler.py"}},[e._v("slurm_job_queuew")]),e._v("): After processing jobs populate imaging or ephys element tables downstream from results file.")])]),e._v(" "),i("figure",[i("img",{attrs:{src:t(461)}}),e._v(" "),i("center",[i("figcaption",[e._v("Workflow manager diagam at the recording process level")])])],1),e._v(" "),i("figure",[i("img",{attrs:{src:t(462)}}),e._v(" "),i("center",[i("figcaption",[e._v("ERD from behavior session to recording process tables")])])],1),e._v(" "),i("h2",{attrs:{id:"collab-reposiotries-to-handle-ephys-imaging-processing"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#collab-reposiotries-to-handle-ephys-imaging-processing"}},[e._v("#")]),e._v(" Collab reposiotries to handle Ephys/Imaging Processing")]),e._v(" "),i("h3",{attrs:{id:"braincogsephyssorters"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#braincogsephyssorters"}},[e._v("#")]),e._v(" BrainCogsEphysSorters")]),e._v(" "),i("h4",{attrs:{id:"set-up-instructions-for-braincogsephyssorters-in-cluster-system"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set-up-instructions-for-braincogsephyssorters-in-cluster-system"}},[e._v("#")]),e._v(" Set up instructions for BrainCogsEphysSorters in cluster system")]),e._v(" "),i("ol",[i("li")])])}),[],!1,null,null,null);i.default=r.exports}}]);